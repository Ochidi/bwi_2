/* Auto-generated by genmsg_cpp for file /nishome/comenukor/ros/rosbuild_ws/bwi_2/wifi_lookup/msg/Wifi.msg */
#ifndef WIFI_LOOKUP_MESSAGE_WIFI_H
#define WIFI_LOOKUP_MESSAGE_WIFI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wifi_lookup
{
template <class ContainerAllocator>
struct Wifi_ {
  typedef Wifi_<ContainerAllocator> Type;

  Wifi_()
  : MAC()
  , dB(0)
  {
  }

  Wifi_(const ContainerAllocator& _alloc)
  : MAC(_alloc)
  , dB(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _MAC_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MAC;

  typedef uint32_t _dB_type;
  uint32_t dB;


  typedef boost::shared_ptr< ::wifi_lookup::Wifi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wifi_lookup::Wifi_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Wifi
typedef  ::wifi_lookup::Wifi_<std::allocator<void> > Wifi;

typedef boost::shared_ptr< ::wifi_lookup::Wifi> WifiPtr;
typedef boost::shared_ptr< ::wifi_lookup::Wifi const> WifiConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wifi_lookup::Wifi_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wifi_lookup::Wifi_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wifi_lookup

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wifi_lookup::Wifi_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wifi_lookup::Wifi_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wifi_lookup::Wifi_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ce5ce45376d0ea0f827fbca726b6de5c";
  }

  static const char* value(const  ::wifi_lookup::Wifi_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xce5ce45376d0ea0fULL;
  static const uint64_t static_value2 = 0x827fbca726b6de5cULL;
};

template<class ContainerAllocator>
struct DataType< ::wifi_lookup::Wifi_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wifi_lookup/Wifi";
  }

  static const char* value(const  ::wifi_lookup::Wifi_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wifi_lookup::Wifi_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string MAC\n\
uint32 dB\n\
\n\
";
  }

  static const char* value(const  ::wifi_lookup::Wifi_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wifi_lookup::Wifi_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.MAC);
    stream.next(m.dB);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Wifi_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wifi_lookup::Wifi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wifi_lookup::Wifi_<ContainerAllocator> & v) 
  {
    s << indent << "MAC: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.MAC);
    s << indent << "dB: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dB);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIFI_LOOKUP_MESSAGE_WIFI_H

